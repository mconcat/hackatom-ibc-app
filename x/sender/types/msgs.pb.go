// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sender/v1beta/msgs.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterEntry struct {
	EntryId              string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	ChannelId            string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId               string `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ValidatorSetProvider string `protobuf:"bytes,4,opt,name=validator_set_provider,json=validatorSetProvider,proto3" json:"validator_set_provider,omitempty"`
	Sender               string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRegisterEntry) Reset()         { *m = MsgRegisterEntry{} }
func (m *MsgRegisterEntry) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterEntry) ProtoMessage()    {}
func (*MsgRegisterEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2c8d92621412a3, []int{0}
}
func (m *MsgRegisterEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterEntry.Merge(m, src)
}
func (m *MsgRegisterEntry) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterEntry proto.InternalMessageInfo

func (m *MsgRegisterEntry) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *MsgRegisterEntry) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgRegisterEntry) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *MsgRegisterEntry) GetValidatorSetProvider() string {
	if m != nil {
		return m.ValidatorSetProvider
	}
	return ""
}

func (m *MsgRegisterEntry) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgSyncEntry struct {
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (m *MsgSyncEntry) Reset()         { *m = MsgSyncEntry{} }
func (m *MsgSyncEntry) String() string { return proto.CompactTextString(m) }
func (*MsgSyncEntry) ProtoMessage()    {}
func (*MsgSyncEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2c8d92621412a3, []int{1}
}
func (m *MsgSyncEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSyncEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSyncEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSyncEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSyncEntry.Merge(m, src)
}
func (m *MsgSyncEntry) XXX_Size() int {
	return m.Size()
}
func (m *MsgSyncEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSyncEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSyncEntry proto.InternalMessageInfo

func (m *MsgSyncEntry) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRegisterEntry)(nil), "hackatomibcapp.sender.v1beta1.MsgRegisterEntry")
	proto.RegisterType((*MsgSyncEntry)(nil), "hackatomibcapp.sender.v1beta1.MsgSyncEntry")
}

func init() { proto.RegisterFile("sender/v1beta/msgs.proto", fileDescriptor_7c2c8d92621412a3) }

var fileDescriptor_7c2c8d92621412a3 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcd, 0x4a, 0x33, 0x31,
	0x18, 0x85, 0x9b, 0xef, 0xd3, 0xd6, 0x06, 0x17, 0x12, 0xa4, 0x8e, 0x8b, 0x06, 0xe9, 0x4a, 0x17,
	0x9d, 0x50, 0xf5, 0x0a, 0x04, 0x17, 0x05, 0x0b, 0xd2, 0xee, 0xdc, 0x94, 0x4c, 0x12, 0x66, 0x82,
	0x9d, 0x24, 0x24, 0xaf, 0x83, 0x73, 0x17, 0xde, 0x8b, 0x37, 0xe1, 0xb2, 0x4b, 0x97, 0x32, 0x73,
	0x23, 0x32, 0x3f, 0xba, 0x75, 0x97, 0x93, 0xe7, 0xf0, 0x72, 0x78, 0x70, 0x14, 0x94, 0x91, 0xca,
	0xb3, 0x62, 0x91, 0x28, 0xe0, 0x2c, 0x0f, 0x69, 0x88, 0x9d, 0xb7, 0x60, 0xc9, 0x34, 0xe3, 0xe2,
	0x99, 0x83, 0xcd, 0x75, 0x22, 0xb8, 0x73, 0x71, 0x57, 0x8c, 0xbb, 0xe2, 0x62, 0xf6, 0x8e, 0xf0,
	0xc9, 0x2a, 0xa4, 0x6b, 0x95, 0xea, 0x00, 0xca, 0xdf, 0x1b, 0xf0, 0x25, 0x39, 0xc7, 0x47, 0xaa,
	0x79, 0x6c, 0xb5, 0x8c, 0xd0, 0x05, 0xba, 0x1c, 0xaf, 0x47, 0x6d, 0x5e, 0x4a, 0x32, 0xc5, 0x58,
	0x64, 0xdc, 0x18, 0xb5, 0x6b, 0xe0, 0xbf, 0x16, 0x8e, 0xfb, 0x9f, 0xa5, 0x24, 0x67, 0x78, 0xe4,
	0xac, 0x87, 0x86, 0xfd, 0x6f, 0xd9, 0xb0, 0x89, 0x4b, 0x49, 0x6e, 0xf1, 0xa4, 0xe0, 0x3b, 0x2d,
	0x39, 0x58, 0xbf, 0x0d, 0x0a, 0xb6, 0xce, 0xdb, 0x42, 0x4b, 0xe5, 0xa3, 0x83, 0xb6, 0x77, 0xfa,
	0x4b, 0x37, 0x0a, 0x1e, 0x7b, 0x46, 0x26, 0x78, 0xd8, 0xed, 0x8d, 0x0e, 0xbb, 0x6b, 0x5d, 0x9a,
	0x5d, 0xe1, 0xe3, 0x55, 0x48, 0x37, 0xa5, 0x11, 0x7f, 0x0d, 0xbe, 0x7b, 0xf8, 0xa8, 0x28, 0xda,
	0x57, 0x14, 0x7d, 0x55, 0x14, 0xbd, 0xd5, 0x74, 0xb0, 0xaf, 0xe9, 0xe0, 0xb3, 0xa6, 0x83, 0xa7,
	0xeb, 0x54, 0x43, 0xf6, 0x92, 0xc4, 0xc2, 0xe6, 0x2c, 0x17, 0xd6, 0x08, 0x0e, 0xec, 0x47, 0xd6,
	0x5c, 0x27, 0x62, 0xce, 0x9d, 0x63, 0xaf, 0xac, 0x37, 0x0b, 0xa5, 0x53, 0x21, 0x19, 0xb6, 0x52,
	0x6f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x33, 0xde, 0x57, 0x70, 0x01, 0x00, 0x00,
}

func (m *MsgRegisterEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorSetProvider) > 0 {
		i -= len(m.ValidatorSetProvider)
		copy(dAtA[i:], m.ValidatorSetProvider)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorSetProvider)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntryId) > 0 {
		i -= len(m.EntryId)
		copy(dAtA[i:], m.EntryId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EntryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSyncEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSyncEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSyncEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryId) > 0 {
		i -= len(m.EntryId)
		copy(dAtA[i:], m.EntryId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EntryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntryId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ValidatorSetProvider)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSyncEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntryId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSyncEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSyncEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSyncEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
