// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sender/v1beta/sync.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterSync struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Sender    string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRegisterSync) Reset()         { *m = MsgRegisterSync{} }
func (m *MsgRegisterSync) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSync) ProtoMessage()    {}
func (*MsgRegisterSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1b0f82186009b64, []int{0}
}
func (m *MsgRegisterSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSync.Merge(m, src)
}
func (m *MsgRegisterSync) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSync) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSync.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSync proto.InternalMessageInfo

func (m *MsgRegisterSync) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgRegisterSync) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *MsgRegisterSync) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRegisterSync)(nil), "hackatomibcapp.sender.v1beta1.MsgRegisterSync")
}

func init() { proto.RegisterFile("sender/v1beta/sync.proto", fileDescriptor_e1b0f82186009b64) }

var fileDescriptor_e1b0f82186009b64 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xb1, 0x4e, 0xc4, 0x30,
	0x10, 0x44, 0x63, 0x90, 0x82, 0xce, 0x0d, 0x52, 0x0a, 0x88, 0x40, 0x67, 0x21, 0x2a, 0x9a, 0xcb,
	0xea, 0xe0, 0x0f, 0xe8, 0x4e, 0x82, 0xe6, 0xe8, 0x68, 0xd0, 0x7a, 0x63, 0x25, 0x16, 0xc4, 0xb6,
	0xe2, 0x05, 0x91, 0xbf, 0xe0, 0xb3, 0x28, 0xaf, 0xa4, 0x44, 0xc9, 0x8f, 0xa0, 0x8b, 0x8f, 0xf2,
	0xcd, 0xcc, 0x6a, 0x67, 0x64, 0x19, 0x8d, 0xab, 0x4d, 0x0f, 0x1f, 0x6b, 0x6d, 0x18, 0x21, 0x0e,
	0x8e, 0xaa, 0xd0, 0x7b, 0xf6, 0xc5, 0xb2, 0x45, 0x7a, 0x45, 0xf6, 0x9d, 0xd5, 0x84, 0x21, 0x54,
	0x29, 0x58, 0xa5, 0xe0, 0xfa, 0xe2, 0x92, 0x67, 0xee, 0xac, 0x63, 0x40, 0x4d, 0x16, 0x78, 0x08,
	0x26, 0xa6, 0xdb, 0x6b, 0x94, 0xa7, 0x8f, 0xb1, 0xd9, 0x9a, 0xc6, 0x46, 0x36, 0xfd, 0xd3, 0xe0,
	0xa8, 0x58, 0x4a, 0x49, 0x2d, 0x3a, 0x67, 0xde, 0x5e, 0x6c, 0x5d, 0x8a, 0x2b, 0x71, 0xb3, 0xd8,
	0x2e, 0x0e, 0xca, 0xa6, 0x2e, 0xce, 0xe5, 0x49, 0xf0, 0x3d, 0xef, 0xbd, 0xa3, 0xd9, 0xcb, 0xf7,
	0xb8, 0xa9, 0x8b, 0x33, 0x99, 0xa7, 0xcf, 0xe5, 0x71, 0xd2, 0x13, 0xdd, 0x3f, 0x7c, 0x8f, 0x4a,
	0xec, 0x46, 0x25, 0x7e, 0x47, 0x25, 0xbe, 0x26, 0x95, 0xed, 0x26, 0x95, 0xfd, 0x4c, 0x2a, 0x7b,
	0xbe, 0x6d, 0x2c, 0xb7, 0xef, 0xba, 0x22, 0xdf, 0x41, 0x47, 0xde, 0x11, 0x32, 0xfc, 0x6f, 0x59,
	0x59, 0x4d, 0x2b, 0x0c, 0x01, 0x3e, 0xe1, 0x30, 0x7c, 0xae, 0xad, 0xf3, 0xb9, 0xf7, 0xdd, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xd8, 0x20, 0x9a, 0x0f, 0x01, 0x00, 0x00,
}

func (m *MsgRegisterSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintSync(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintSync(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}

func sovSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSync(x uint64) (n int) {
	return sovSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSync = fmt.Errorf("proto: unexpected end of group")
)
