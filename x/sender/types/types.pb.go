// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sender/v1beta/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorSetProviderStaking struct {
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
}

func (m *ValidatorSetProviderStaking) Reset()         { *m = ValidatorSetProviderStaking{} }
func (m *ValidatorSetProviderStaking) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetProviderStaking) ProtoMessage()    {}
func (*ValidatorSetProviderStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9253f62146a13d6, []int{0}
}
func (m *ValidatorSetProviderStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetProviderStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetProviderStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetProviderStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetProviderStaking.Merge(m, src)
}
func (m *ValidatorSetProviderStaking) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetProviderStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetProviderStaking.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetProviderStaking proto.InternalMessageInfo

func (m *ValidatorSetProviderStaking) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

type ValidatorSetProvider struct {
	// Types that are valid to be assigned to Provider:
	//	*ValidatorSetProvider_Staking
	Provider isValidatorSetProvider_Provider `protobuf_oneof:"provider"`
}

func (m *ValidatorSetProvider) Reset()         { *m = ValidatorSetProvider{} }
func (m *ValidatorSetProvider) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetProvider) ProtoMessage()    {}
func (*ValidatorSetProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9253f62146a13d6, []int{1}
}
func (m *ValidatorSetProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetProvider.Merge(m, src)
}
func (m *ValidatorSetProvider) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetProvider proto.InternalMessageInfo

type isValidatorSetProvider_Provider interface {
	isValidatorSetProvider_Provider()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValidatorSetProvider_Staking struct {
	Staking *ValidatorSetProviderStaking `protobuf:"bytes,1,opt,name=staking,proto3,oneof" json:"staking,omitempty"`
}

func (*ValidatorSetProvider_Staking) isValidatorSetProvider_Provider() {}

func (m *ValidatorSetProvider) GetProvider() isValidatorSetProvider_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *ValidatorSetProvider) GetStaking() *ValidatorSetProviderStaking {
	if x, ok := m.GetProvider().(*ValidatorSetProvider_Staking); ok {
		return x.Staking
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidatorSetProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidatorSetProvider_Staking)(nil),
	}
}

type SyncEntry struct {
	ChannelId string                `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string                `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Provider  *ValidatorSetProvider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *SyncEntry) Reset()         { *m = SyncEntry{} }
func (m *SyncEntry) String() string { return proto.CompactTextString(m) }
func (*SyncEntry) ProtoMessage()    {}
func (*SyncEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9253f62146a13d6, []int{2}
}
func (m *SyncEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncEntry.Merge(m, src)
}
func (m *SyncEntry) XXX_Size() int {
	return m.Size()
}
func (m *SyncEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SyncEntry proto.InternalMessageInfo

func (m *SyncEntry) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *SyncEntry) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *SyncEntry) GetProvider() *ValidatorSetProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorSetProviderStaking)(nil), "hackatomibcapp.sender.v1beta1.ValidatorSetProviderStaking")
	proto.RegisterType((*ValidatorSetProvider)(nil), "hackatomibcapp.sender.v1beta1.ValidatorSetProvider")
	proto.RegisterType((*SyncEntry)(nil), "hackatomibcapp.sender.v1beta1.SyncEntry")
}

func init() { proto.RegisterFile("sender/v1beta/types.proto", fileDescriptor_a9253f62146a13d6) }

var fileDescriptor_a9253f62146a13d6 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x4e, 0xcd, 0x4b,
	0x49, 0x2d, 0xd2, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0xd4, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xcd, 0x48, 0x4c, 0xce, 0x4e, 0x2c, 0xc9, 0xcf, 0xcd,
	0x4c, 0x4a, 0x4e, 0x2c, 0x28, 0xd0, 0x83, 0xa8, 0xd4, 0x83, 0xa8, 0x34, 0x54, 0xb2, 0xe3, 0x92,
	0x0e, 0x4b, 0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0x0a, 0x4e, 0x2d, 0x09, 0x28, 0xca, 0x2f,
	0xcb, 0x4c, 0x49, 0x2d, 0x0a, 0x2e, 0x49, 0xcc, 0xce, 0xcc, 0x4b, 0x17, 0x92, 0xe7, 0xe2, 0x2e,
	0x80, 0x0a, 0xc5, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x71, 0xc1, 0x84, 0x3c,
	0x53, 0x94, 0xaa, 0xb8, 0x44, 0xb0, 0xe9, 0x17, 0x0a, 0xe3, 0x62, 0x2f, 0x86, 0x98, 0x01, 0xd6,
	0xc4, 0x6d, 0x64, 0xa5, 0x87, 0xd7, 0x21, 0x7a, 0x78, 0x5c, 0xe1, 0xc1, 0x10, 0x04, 0x33, 0xcc,
	0x89, 0x8b, 0x8b, 0x03, 0x66, 0xbb, 0xd2, 0x14, 0x46, 0x2e, 0xce, 0xe0, 0xca, 0xbc, 0x64, 0xd7,
	0xbc, 0x92, 0xa2, 0x4a, 0x21, 0x59, 0x2e, 0xae, 0xe4, 0x8c, 0xc4, 0xbc, 0xbc, 0xd4, 0x1c, 0x84,
	0x4b, 0x39, 0xa1, 0x22, 0x9e, 0x29, 0x42, 0xe2, 0x5c, 0xec, 0x05, 0xf9, 0x45, 0x25, 0x20, 0x39,
	0x26, 0xb0, 0x1c, 0x1b, 0x88, 0xeb, 0x99, 0x22, 0xe4, 0x8f, 0x30, 0x51, 0x82, 0x19, 0xec, 0x54,
	0x63, 0x32, 0x9c, 0x1a, 0x04, 0x37, 0xc4, 0xc9, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0x8c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x73,
	0x93, 0xf3, 0xf3, 0x92, 0x13, 0x4b, 0xf4, 0x61, 0x56, 0xe9, 0x66, 0x26, 0x25, 0xeb, 0x26, 0x16,
	0x14, 0xe8, 0x57, 0xe8, 0x43, 0x23, 0x13, 0x1c, 0x8b, 0x49, 0x6c, 0xe0, 0x68, 0x34, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0x52, 0xe1, 0x5b, 0xe3, 0x01, 0x00, 0x00,
}

func (m *ValidatorSetProviderStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetProviderStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetProviderStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != nil {
		{
			size := m.Provider.Size()
			i -= size
			if _, err := m.Provider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetProvider_Staking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetProvider_Staking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Staking != nil {
		{
			size, err := m.Staking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SyncEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != nil {
		{
			size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorSetProviderStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ValidatorSetProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != nil {
		n += m.Provider.Size()
	}
	return n
}

func (m *ValidatorSetProvider_Staking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staking != nil {
		l = m.Staking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SyncEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorSetProviderStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetProviderStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetProviderStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValidatorSetProviderStaking{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &ValidatorSetProvider_Staking{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &ValidatorSetProvider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
